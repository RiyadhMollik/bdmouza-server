# import json
# import unicodedata
# import google.generativeai as genai

# from django.core.management.base import BaseCommand
# from driveapp.models import Mouzamapdata


# class Command(BaseCommand):
#     help = "Checks and corrects unique district names in Mouzamapdata using Gemini, ensuring unique valid output"

#     def add_arguments(self, parser):
#         parser.add_argument('--api_key', type=str, required=True, help='Your Gemini API key')
#         parser.add_argument('--save', action='store_true', help='Save results to corrected_districts.json')

#     def handle(self, *args, **kwargs):
#         api_key = kwargs['api_key']
#         genai.configure(api_key=api_key)
#         model = genai.GenerativeModel("models/gemini-1.5-pro-latest")

#         # Step 1: Get unique normalized district names from DB
#         raw_districts = Mouzamapdata.objects.values_list('district_name', flat=True)
#         unique_districts = set()
#         for d in raw_districts:
#             if d:
#                 normalized = unicodedata.normalize("NFC", d.strip())
#                 unique_districts.add(normalized)

#         corrected_map = {}  # map original тЖТ corrected
#         suggested_names = set()  # to track unique suggested names

#         self.stdout.write(f"ЁЯФН Checking {len(unique_districts)} unique districts with Gemini...\n")

#         for count, district in enumerate(sorted(unique_districts), start=1):
#             try:
#                 prompt = (
#                     f"'{district}' ржХрж┐ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рзмрзкржЯрж┐ ржЬрзЗрж▓рж╛рж░ ржоржзрзНржпрзЗ ржПржХржЯрж┐ рж╕ржарж┐ржХ ржирж╛ржо? "
#                     f"ржпржжрж┐ ржирж╛ рж╣ржпрж╝, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржарж┐ржХ ржЬрзЗрж▓рж╛рж░ ржирж╛ржоржЯрж┐ рж▓рж┐ржЦрзБржиред "
#                     f"ржЙржжрж╛рж╣рж░ржгрж╕рзНржмрж░рзВржк: ржврж╛ржХрж╛, ржХрзБржорж┐рж▓рзНрж▓рж╛, рж░рж╛ржЬрж╢рж╛рж╣рзА ржЗрждрзНржпрж╛ржжрж┐ред "
#                     f"рж╢рзБржзрзБржорж╛рждрзНрж░ ржирж╛ржо ржжрж┐ржи, ржЕржирзНржп ржХрж┐ржЫрзБ ржиржпрж╝ред"
#                 )
#                 response = model.generate_content(prompt)
#                 suggestion = response.text.strip()

#                 # Avoid duplicates in output
#                 if suggestion not in suggested_names:
#                     suggested_names.add(suggestion)
#                     status = "тЬЕ"
#                 else:
#                     status = "ЁЯФБ (Duplicate suggestion, skipped printing)"

#                 corrected_map[district] = suggestion
#                 self.stdout.write(f"{count}. {district} тЖТ {suggestion} {status}")

#             except Exception as e:
#                 self.stderr.write(self.style.ERROR(f"{count}. тЭМ Error with '{district}': {e}"))

#         # Save output if requested
#         if kwargs.get("save"):
#             with open("corrected_districts.json", "w", encoding="utf-8") as f:
#                 json.dump(corrected_map, f, ensure_ascii=False, indent=2)
#             self.stdout.write(self.style.SUCCESS("тЬЕ Saved corrected districts to corrected_districts.json"))

#         self.stdout.write(self.style.SUCCESS(f"\nтЬЕ Finished checking. Total unique suggestions: {len(suggested_names)}"))
import json
import unicodedata
import google.generativeai as genai

from django.core.management.base import BaseCommand
from driveapp.models import Mouzamapdata, District, Division

# Correct district тЖТ division mapping
DISTRICT_TO_DIVISION = {
    "ржврж╛ржХрж╛": "ржврж╛ржХрж╛",
    "ржлрж░рж┐ржжржкрзБрж░": "ржврж╛ржХрж╛",
    "ржЧрж╛ржЬрзАржкрзБрж░": "ржврж╛ржХрж╛",
    "ржирж╛рж░рж╛ржпрж╝ржгржЧржЮрзНржЬ": "ржврж╛ржХрж╛",
    "ржорзБржирзНрж╕рзАржЧржЮрзНржЬ": "ржврж╛ржХрж╛",
    "рж░рж╛ржЬржмрж╛ржбрж╝рзА": "ржврж╛ржХрж╛",
    "ржЯрж╛ржЩрзНржЧрж╛ржЗрж▓": "ржврж╛ржХрж╛",
    "ржХрж┐рж╢рзЛрж░ржЧржЮрзНржЬ": "ржврж╛ржХрж╛",
    "ржорж╛ржирж┐ржХржЧржЮрзНржЬ": "ржврж╛ржХрж╛",
    "ржорж╛ржжрж╛рж░рзАржкрзБрж░": "ржврж╛ржХрж╛",
    "рж╢рж░рзАржпрж╝рждржкрзБрж░": "ржврж╛ржХрж╛",
    "ржирж░рж╕рж┐ржВржжрзА": "ржврж╛ржХрж╛",

    "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржХрзБржорж┐рж▓рзНрж▓рж╛": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржирзЛржпрж╝рж╛ржЦрж╛рж▓рзА": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржлрзЗржирзА": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "рж▓ржХрзНрж╖рзНржорзАржкрзБрж░": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржЦрж╛ржЧржбрж╝рж╛ржЫржбрж╝рж┐": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржмрж╛ржирзНржжрж░ржмрж╛ржи": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "рж░рж╛ржЩрзНржЧрж╛ржорж╛ржЯрж┐": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржмрзНрж░рж╛рж╣рзНржоржгржмрж╛ржбрж╝рж┐ржпрж╝рж╛": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржЪрж╛ржБржжржкрзБрж░": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",
    "ржХржХрзНрж╕ржмрж╛ржЬрж╛рж░": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо",

    "рж░рж╛ржЬрж╢рж╛рж╣рзА": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "ржиржУржЧрж╛ржБ": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "ржирж╛ржЯрзЛрж░": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "ржЪрж╛ржБржкрж╛ржЗржиржмрж╛ржмржЧржЮрзНржЬ": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "ржмржЧрзБржбрж╝рж╛": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "рж╕рж┐рж░рж╛ржЬржЧржЮрзНржЬ": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "ржЬржпрж╝ржкрзБрж░рж╣рж╛ржЯ": "рж░рж╛ржЬрж╢рж╛рж╣рзА",
    "ржкрж╛ржмржирж╛": "рж░рж╛ржЬрж╢рж╛рж╣рзА",

    "ржЦрзБрж▓ржирж╛": "ржЦрзБрж▓ржирж╛",
    "ржпрж╢рзЛрж░": "ржЦрзБрж▓ржирж╛",
    "ржЭрж┐ржирж╛ржЗржжрж╣": "ржЦрзБрж▓ржирж╛",
    "ржорж╛ржЧрзБрж░рж╛": "ржЦрзБрж▓ржирж╛",
    "ржиржбрж╝рж╛ржЗрж▓": "ржЦрзБрж▓ржирж╛",
    "ржмрж╛ржЧрзЗрж░рж╣рж╛ржЯ": "ржЦрзБрж▓ржирж╛",
    "ржЪрзБржпрж╝рж╛ржбрж╛ржЩрзНржЧрж╛": "ржЦрзБрж▓ржирж╛",
    "ржорзЗрж╣рзЗрж░ржкрзБрж░": "ржЦрзБрж▓ржирж╛",
    "рж╕рж╛рждржХрзНрж╖рзАрж░рж╛": "ржЦрзБрж▓ржирж╛",

    "ржмрж░рж┐рж╢рж╛рж▓": "ржмрж░рж┐рж╢рж╛рж▓",
    "ржкржЯрзБржпрж╝рж╛ржЦрж╛рж▓рзА": "ржмрж░рж┐рж╢рж╛рж▓",
    "ржкрж┐рж░рзЛржЬржкрзБрж░": "ржмрж░рж┐рж╢рж╛рж▓",
    "ржмрж░ржЧрзБржирж╛": "ржмрж░рж┐рж╢рж╛рж▓",
    "ржЭрж╛рж▓ржХрж╛ржарж┐": "ржмрж░рж┐рж╢рж╛рж▓",
    "ржнрзЛрж▓рж╛": "ржмрж░рж┐рж╢рж╛рж▓",

    "рж╕рж┐рж▓рзЗржЯ": "рж╕рж┐рж▓рзЗржЯ",
    "рж╣ржмрж┐ржЧржЮрзНржЬ": "рж╕рж┐рж▓рзЗржЯ",
    "ржорзМрж▓ржнрзАржмрж╛ржЬрж╛рж░": "рж╕рж┐рж▓рзЗржЯ",
    "рж╕рзБржирж╛ржоржЧржЮрзНржЬ": "рж╕рж┐рж▓рзЗржЯ",

    "рж░ржВржкрзБрж░": "рж░ржВржкрзБрж░",
    "ржжрж┐ржирж╛ржЬржкрзБрж░": "рж░ржВржкрзБрж░",
    "ржирзАрж▓ржлрж╛ржорж╛рж░рзА": "рж░ржВржкрзБрж░",
    "ржарж╛ржХрзБрж░ржЧрж╛ржБржУ": "рж░ржВржкрзБрж░",
    "ржХрзБржбрж╝рж┐ржЧрзНрж░рж╛ржо": "рж░ржВржкрзБрж░",
    "рж▓рж╛рж▓ржоржирж┐рж░рж╣рж╛ржЯ": "рж░ржВржкрзБрж░",
    "ржкржЮрзНржЪржЧржбрж╝": "рж░ржВржкрзБрж░",
    "ржЧрж╛ржЗржмрж╛ржирзНржзрж╛": "рж░ржВржкрзБрж░",

    "ржоржпрж╝ржоржирж╕рж┐ржВрж╣": "ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
    "ржЬрж╛ржорж╛рж▓ржкрзБрж░": "ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
    "ржирзЗрждрзНрж░ржХрзЛржирж╛": "ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
    "рж╢рзЗрж░ржкрзБрж░": "ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
}


class Command(BaseCommand):
    help = "Uses Gemini to correct district names, and inserts them into District & Division models"

    def add_arguments(self, parser):
        parser.add_argument('--api_key', type=str, required=True, help='Your Gemini API key')

    def handle(self, *args, **kwargs):
        api_key = kwargs['api_key']
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("models/gemini-1.5-pro-latest")

        # Step 1: Get unique district names from database
        raw_districts = Mouzamapdata.objects.values_list('district_name', flat=True)
        unique_districts = set()
        for d in raw_districts:
            if d:
                normalized = unicodedata.normalize("NFC", d.strip())
                unique_districts.add(normalized)

        self.stdout.write(f"ЁЯФН Checking {len(unique_districts)} unique districts with Gemini...\n")

        inserted = 0
        already = 0

        for count, district in enumerate(sorted(unique_districts), start=1):
            try:
                prompt = (
                    f"'{district}' ржХрж┐ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рзмрзк ржЬрзЗрж▓рж╛рж░ ржоржзрзНржпрзЗ ржПржХржЯрж┐? ржпржжрж┐ ржирж╛ рж╣ржпрж╝, рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржарж┐ржХ ржЬрзЗрж▓рж╛рж░ ржирж╛ржоржЯрж┐ рж▓рж┐ржЦрзБржиред "
                    f"ржХрзЛржи ржмрзНржпрж╛ржЦрзНржпрж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗ, рж╢рзБржзрзБ рж╕ржарж┐ржХ ржЬрзЗрж▓рж╛рж░ ржирж╛ржо ржжрж┐ржиред"
                )
                response = model.generate_content(prompt)
                suggestion = response.text.strip()

                if suggestion not in DISTRICT_TO_DIVISION:
                    self.stdout.write(f"{count}. тЪая╕П Skipped: '{district}' тЖТ '{suggestion}' (Unknown)")
                    continue

                division_clean = DISTRICT_TO_DIVISION[suggestion]
                division_name = f"{division_clean} ржмрж┐ржнрж╛ржЧ"

                # Create or get division
                division_obj, _ = Division.objects.get_or_create(name=division_name)

                # Create or get district
                district_obj, created = District.objects.get_or_create(name=suggestion, division_name=division_obj)
                if created:
                    inserted += 1
                    self.stdout.write(f"{count}. тЬЕ Inserted: {suggestion} тЖТ {division_name}")
                else:
                    already += 1
                    self.stdout.write(f"{count}. ЁЯФБ Exists: {suggestion}")

            except Exception as e:
                self.stderr.write(self.style.ERROR(f"{count}. тЭМ Error with '{district}': {e}"))

        self.stdout.write(self.style.SUCCESS(f"\nтЬЕ Inserted {inserted} new districts. Already existed: {already}"))
